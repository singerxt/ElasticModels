'use strict';const{long,integer,short,byte,double,float}=require('./index');describe('Numeric data type ./lib/Schema/DataTypes/numeric',function(){describe('long',()=>{it('Should be a function',a=>{long.should.be.type('function'),a()}),it('Should return true for valid long number',a=>{const b=[123321,123123,4545645,34345343,3223344412,Number.MAX_SAFE_INTEGER,-2132131];b.forEach(c=>long().validate(c).should.be.true()),a()}),it('Should return false for not valid long number',a=>{[null,'string',[],{},-9.223372036854776e+21,92233720368547760000].forEach(b=>long().validate(b).should.be.false()),a()})}),describe('integer',()=>{it('Should be a function',a=>{integer.should.be.type('function'),a()}),it('Should return true for valid integer number',a=>{[123123,23231,321312,32312,231123].forEach(b=>integer().validate(b).should.be.true()),a()}),it('Should return false for not valid integer number',a=>{[null,'string',[],{},21474836481,-214748123640].forEach(b=>integer().validate(b).should.be.false()),a()})}),describe('byte',()=>{it('Should be a function',a=>{integer.should.be.type('function'),a()}),it('Should return true for valid byte number',a=>{[100,60,120,1,20].forEach(b=>byte().validate(b).should.be.true()),a()}),it('Should return false for not valid byte number',a=>{[null,'string',[],{},200,-200].forEach(b=>byte().validate(b).should.be.false()),a()})}),describe('short',()=>{it('Should be a function',a=>{integer.should.be.type('function'),a()}),it('Should return true for valid short number',a=>{[12312,2323,32131,3231,23113].forEach(b=>short().validate(b).should.be.true()),a()}),it('Should return false for not valid short number',a=>{[null,'string',[],{},2147483,-21474812].forEach(b=>short().validate(b).should.be.false()),a()})}),describe('double',()=>{it('Should be a function',a=>{integer.should.be.type('function'),a()}),it('Should return true for valid double number',a=>{[122.1,23.13,999.12].forEach(b=>double().validate(b).should.be.true()),a()}),it('Should return false for not valid double number',a=>{[null,'string',[],{},2147483,-21474812].forEach(b=>double().validate(b).should.be.false()),a()})})});